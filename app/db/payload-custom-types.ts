/* tslint:disable */
/**
 * This file was automatically generated by Payload CMS.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    images: Image;
    characters: Character;
    materials: Material;
    traces: Trace;
    eidolons: Eidolon;
    skillTrees: SkillTree;
    lightCones: LightCone;
    relicSets: RelicSet;
    relics: Relic;
    enemySkills: EnemySkill;
    enemies: Enemy;
    enemyVariations: EnemyVariation;
    achievements: Achievement;
    achievementSeries: AchievementSery;
    aeons: Aeon;
    blessings: Blessing;
    recipes: Recipe;
    banners: Banner;
    playerIcons: PlayerIcon;
    submittedWarps: SubmittedWarp;
    _elements: _Element;
    _itemTypes: _ItemType;
    _paths: _Path;
    _rarities: _Rarity;
    _statTypes: _StatType;
    _relicStats: _RelicStat;
    _enemyStatusRes: _EnemyStatusRe;
    _enemyCamps: _EnemyCamp;
    _recipeTypes: _RecipeType;
    search: Search;
  };
  globals: {};
}
export interface User {
  id: string;
  roles?: ('staff' | 'user')[];
  updatedAt: string;
  createdAt: string;
  email?: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface Image {
  id: string;
  createdBy: User;
  prefix?: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
}
export interface Character {
  id: string;
  character_id?: string;
  name?: string;
  icon?: Image;
  rarity?: _Rarity;
  element?: _Element;
  path?: _Path;
  sp_need?: number;
  exp_group?: number;
  max_promotion?: number;
  max_rank?: number;
  eidolons?: Eidolon[];
  traces?: Trace[];
  icon_name?: string;
  image_round_icon_name?: string;
  image_action_name?: string;
  image_battle_detail_name?: string;
  image_full_name?: string;
  image_full_bg_name?: string;
  image_full_front_name?: string;
  image_draw_name?: string;
  reward_list?: {
    materials?: Material;
    qty?: number;
    id?: string;
  }[];
  reward_max_list?: {
    materials?: Material;
    qty?: number;
    id?: string;
  }[];
  stats_csv?: string;
  stats?: {
    label?: string;
    data?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    id?: string;
  }[];
  promotion_cost?: {
    level?: number;
    max_level?: number;
    material_qty?: {
      materials?: Material;
      qty?: number;
      id?: string;
    }[];
    id?: string;
  }[];
  voice_lines?: {
    title?: string;
    text?: string;
    voice_en?: Image;
    voice_jp?: Image;
    voice_cn?: Image;
    voice_kr?: Image;
    id?: string;
  }[];
  cv_cn?: string;
  cv_jp?: string;
  cv_kr?: string;
  cv_en?: string;
  camp?: string;
  story?: {
    title?: string;
    text?: string;
    unlock?: string;
    id?: string;
  }[];
  image_round_icon?: Image;
  image_action?: Image;
  image_battle_detail?: Image;
  image_full?: Image;
  image_full_bg?: Image;
  image_full_front?: Image;
  image_draw?: Image;
  videos?: {
    title?: string;
    url?: string;
    id?: string;
  }[];
  checksum?: string;
  checksum_voice_lines?: string;
  checksum_profile?: string;
  updatedAt: string;
  createdAt: string;
}
export interface _Rarity {
  id: string;
  name?: string;
  icon?: Image;
  data_key?: string;
  display_number?: string;
  color?: string;
  color_line?: string;
  image_frame_name?: string;
  icon_frame_name?: string;
  image_bg_name?: string;
  image_frame?: Image;
  icon_frame?: Image;
  image_bg?: Image;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface _Element {
  id: string;
  data_key?: string;
  name?: string;
  icon?: Image;
  icon_name?: string;
  icon_color_name?: string;
  icon_active_name?: string;
  icon_inactive_name?: string;
  icon_damage_res_name?: string;
  icon_color?: Image;
  icon_active?: Image;
  icon_inactive?: Image;
  icon_damage_res?: Image;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface _Path {
  id: string;
  data_key?: string;
  name?: string;
  icon?: Image;
  description?: string;
  icon_name?: string;
  icon_small_name?: string;
  icon_small?: Image;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Eidolon {
  id: string;
  eidolon_id?: string;
  name?: string;
  icon?: Image;
  image?: Image;
  description?: string;
  rank?: number;
  trigger?: string;
  unlock_materials?: {
    materials?: Material;
    qty?: number;
    id?: string;
  }[];
  icon_name?: string;
  image_name?: string;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Material {
  id: string;
  data_key?: string;
  name?: string;
  icon?: Image;
  description?: string;
  bg_description?: string;
  itemtype?: _ItemType;
  rarity?: _Rarity;
  icon_name?: string;
  max_limit?: number;
  purpose_type?: number;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface _ItemType {
  id: string;
  data_key?: string;
  name?: string;
  icon?: Image;
  inv_type?: string;
  sort_weight?: number;
  type_categories?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  icon_name?: string;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Trace {
  id: string;
  trace_id?: string;
  name?: string;
  icon?: Image;
  desc_type?: string;
  icon_name?: string;
  icon_ultra_name?: string;
  description_per_level?: {
    level?: number;
    description?: string;
    id?: string;
  }[];
  max_level?: number;
  damage_type?: string;
  effect_type?: string;
  init_cooldown?: number;
  cooldown?: number;
  sp_ratio?: number;
  bp_need?: number;
  skill_need?: number;
  delay_ratio?: number;
  tag?: string;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface SkillTree {
  id: string;
  point_id?: string;
  name?: string;
  icon?: Image;
  description?: string;
  character?: Character;
  point_type?: number;
  anchor?: string;
  max_level?: number;
  req_level?: number;
  req_ascension?: number;
  default_unlock?: boolean;
  icon_name?: string;
  level_up_cost?: {
    level?: number;
    material_qty?: {
      materials?: Material;
      qty?: number;
      id?: string;
    }[];
    id?: string;
  }[];
  stat_added?: {
    stat_type?: _StatType;
    value?: number;
    id?: string;
  }[];
  affected_skill?: Trace[];
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface _StatType {
  id: string;
  stat_id?: string;
  data_key?: string;
  property_classify?: number;
  name?: string;
  icon?: Image;
  icon_name?: string;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface LightCone {
  id: string;
  lightcone_id?: string;
  name?: string;
  icon?: Image;
  description?: string;
  bg_description?: string;
  rarity?: _Rarity;
  path?: _Path;
  max_promotion?: number;
  icon_name?: string;
  image_full_name?: string;
  max_rank?: number;
  exp_type?: number;
  exp_provide?: number;
  coin_cost?: number;
  skill_data?: {
    level?: number;
    name?: string;
    desc?: string;
    stat_added?: {
      stat_type?: _StatType;
      value?: number;
      id?: string;
    }[];
    id?: string;
  }[];
  stats?: {
    label?: string;
    data?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    id?: string;
  }[];
  stats_csv?: string;
  promotion_cost?: {
    material_qty?: {
      materials?: Material;
      qty?: number;
      id?: string;
    }[];
    id?: string;
  }[];
  image_full?: Image;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface RelicSet {
  id: string;
  relicset_id?: string;
  name?: string;
  icon?: Image;
  icon_name?: string;
  set_effect?: {
    req_no?: number;
    description?: string;
    property_list?: {
      stattype?: _StatType;
      value?: number;
      id?: string;
    }[];
    id?: string;
  }[];
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Relic {
  id: string;
  relic_id?: string;
  name?: string;
  icon?: Image;
  rarity?: _Rarity;
  max_limit?: number;
  icon_name?: string;
  description?: string;
  bg_description?: string;
  return_item_list?: {
    materials?: Material;
    qty?: number;
    id?: string;
  }[];
  relicset_id?: RelicSet;
  relic_type?: string;
  mainstat_group?: _RelicStat[];
  substat_group?: _RelicStat[];
  max_level?: number;
  exp_type?: number;
  exp_value?: number;
  coin_cost?: number;
  r_storycontent?: string;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface _RelicStat {
  id: string;
  data_key?: string;
  name?: string;
  icon?: Image;
  group_id?: string;
  type?: string;
  affix_id?: string;
  stattype?: _StatType;
  base_val?: number;
  level_add?: number;
  stats?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface EnemySkill {
  id: string;
  data_key?: string;
  name?: string;
  icon?: Image;
  sp_hit_base?: number;
  delay_ratio?: number;
  skill_trigger_key?: string;
  damage_type?: _Element;
  description?: string;
  type?: string;
  skill_params?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Enemy {
  id: string;
  data_key?: string;
  name?: string;
  atlas_sort?: string;
  camp?: _EnemyCamp;
  icon?: Image;
  image_full?: Image;
  enemy_variations?: EnemyVariation[];
  icon_name?: string;
  image_full_name?: string;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface _EnemyCamp {
  id: string;
  data_key?: string;
  name?: string;
  sort?: number;
  icon?: Image;
  icon_name?: string;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface EnemyVariation {
  id: string;
  data_key?: string;
  name?: string;
  icon?: Image;
  image_full?: Image;
  monster_template?: Enemy;
  hard_level_group?: number;
  elite_group?: number;
  rank?: string;
  description?: string;
  skill_list?: EnemySkill[];
  debuff_resist?: {
    debuff?: _EnemyStatusRe;
    value?: number;
    id?: string;
  }[];
  elemental_weaknesses?: _Element[];
  damage_resist?: {
    element?: _Element;
    value?: number;
    id?: string;
  }[];
  stance_count?: number;
  initial_delay_ratio?: number;
  crit_damage_base?: number;
  min_fatigue_ratio?: number;
  icon_name?: string;
  image_full_name?: string;
  atk_base?: number;
  def_base?: number;
  hp_base?: number;
  spd_base?: number;
  stance_base?: number;
  atk_ratio?: number;
  def_ratio?: number;
  hp_ratio?: number;
  spd_ratio?: number;
  stance_ratio?: number;
  stats_csv?: string;
  stats?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  rewards?: {
    world_level?: number;
    exp_reward?: number;
    drop_list?: Material[];
    id?: string;
  }[];
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface _EnemyStatusRe {
  id: string;
  data_key?: string;
  name?: string;
  icon?: Image;
  icon_name?: string;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Achievement {
  id: string;
  data_key?: string;
  name?: string;
  icon?: Image;
  description?: string;
  achievement_series?: AchievementSery;
  rarity?: string;
  priority?: number;
  show_type?: string;
  quest?: string;
  linear_quest?: string;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface AchievementSery {
  id: string;
  data_key?: string;
  name?: string;
  icon?: Image;
  icon_name?: string;
  icon_small_name?: string;
  icon_small?: Image;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Aeon {
  id: string;
  data_key?: string;
  name?: string;
  rogue_version?: string;
  sort?: string;
  subtitle?: string;
  path_name?: string;
  effect_1?: string;
  effect_2?: string;
  icon_name?: string;
  icon_small_name?: string;
  icon_class_name?: string;
  icon?: Image;
  icon_small?: Image;
  icon_class?: Image;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Blessing {
  id: string;
  data_key?: string;
  name?: string;
  icon_name?: string;
  icon?: Image;
  rarity?: _Rarity;
  aeon?: Aeon;
  is_show?: boolean;
  buff_tag?: string;
  max_level?: number;
  effects?: {
    level?: number;
    description?: string;
    description_simple?: string;
    id?: string;
  }[];
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Recipe {
  id: string;
  data_key?: string;
  name?: string;
  icon?: Image;
  icon_name?: string;
  formula_type?: string;
  coin_cost?: number;
  order?: number;
  world_level_require?: number;
  max_count?: number;
  recipe_type?: _RecipeType;
  result_item?: Material;
  material_cost?: {
    materials?: Material;
    qty?: number;
    id?: string;
  }[];
  special_material_cost?: Material[];
  special_material_cost_num?: number;
  relic_list?: Relic[];
  is_show_hold_num?: boolean;
  limit_type?: string;
  func_type?: string;
  item_compose_tag?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface _RecipeType {
  id: string;
  data_key?: string;
  name?: string;
  description?: string;
  order?: number;
  unlock_id?: string;
  is_main_type?: boolean;
  icon?: Image;
  icon_name?: string;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Banner {
  id: string;
  banner_id?: string;
  name?: string;
  gacha_id?: string;
  icon?: Image;
  name_full?: string;
  description?: string;
  type?: 'standard' | 'beginner' | 'limited' | 'light_cone';
  run?: number;
  start_date?: string;
  end_date?: string;
  featured_characters?: Character[];
  featured_light_cones?: LightCone[];
  banner_characters?: Character[];
  banner_light_cones?: LightCone[];
  updatedAt: string;
  createdAt: string;
}
export interface PlayerIcon {
  id: string;
  name?: string;
  icon?: Image;
  data_key?: string;
  icon_name?: string;
  checksum?: string;
  updatedAt: string;
  createdAt: string;
}
export interface SubmittedWarp {
  id: string;
  uid?: string;
  user?: string;
  gacha_id?: string;
  gacha_type?: string;
  item_id?: string;
  count?: string;
  time?: string;
  name?: string;
  lang?: string;
  item_type?: string;
  rank_type?: string;
  submission_type?: 'api' | 'file';
  icon?: Image;
  updatedAt: string;
  createdAt: string;
}
export interface Search {
  id: string;
  name?: string;
  priority?: number;
  doc:
    | {
        value: Character;
        relationTo: 'characters';
      }
    | {
        value: Material;
        relationTo: 'materials';
      }
    | {
        value: Recipe;
        relationTo: 'recipes';
      }
    | {
        value: Blessing;
        relationTo: 'blessings';
      }
    | {
        value: AchievementSery;
        relationTo: 'achievementSeries';
      }
    | {
        value: Enemy;
        relationTo: 'enemies';
      }
    | {
        value: RelicSet;
        relationTo: 'relicSets';
      }
    | {
        value: LightCone;
        relationTo: 'lightCones';
      };
  icon?: Image;
  updatedAt: string;
  createdAt: string;
}
